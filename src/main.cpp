#include <Arduino.h>
#include "HX711.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////                            //////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////        HX711 utility       //////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////                            //////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// HX711 circuit wiring
#define LOADCELL_DOUT1_PIN_scaleLFL 17
#define LOADCELL_DOUT1_PIN_scaleRFL 22
#define LOADCELL_SCK_PIN_LFL 4
#define LOADCELL_SCK_PIN_RFL 4

// HX711 objects
HX711 scaleLFL;
HX711 scaleRFL;

//strain gauge left front leg (example name)
const double factorLFL = 1060.882738;
double freeNumberLFL = 180.4;

const double factorRFL = 1917.529526;
double freeNumberRFL = -9.3;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////                            //////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////        strain guage        //////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////          variables         //////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////                            //////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define ARRAY_SIZE 10
#define NUM_ARRAYS 2

typedef struct{
    double measurementsArray[ARRAY_SIZE];
    int indexInArrary;
    double sum;
} StrainGuage;

StrainGuage strainGuageArrays[NUM_ARRAYS];

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////                            //////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////        declarations        //////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////                            //////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double GetValueStrainGauge(HX711& scale, double factor, double freeNumber);
double RunningAverage(StrainGuage *strainGuageArray, double value);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////                            //////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////           ESP 32           //////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////                            //////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void setup() {
    Serial.begin(115200);
    scaleLFL.begin(LOADCELL_DOUT1_PIN_scaleLFL, LOADCELL_SCK_PIN_LFL);
    scaleRFL.begin(LOADCELL_DOUT1_PIN_scaleRFL, LOADCELL_SCK_PIN_RFL);
}

void loop() {

    float time1=millis();
    //getting data
    double weightOnLFLScale= GetValueStrainGauge(scaleLFL, factorLFL, freeNumberLFL);
    double weightOnRFLScale = GetValueStrainGauge(scaleRFL, factorRFL, freeNumberRFL);

    double averageLFL = RunningAverage(&strainGuageArrays[0], weightOnLFLScale);
    double averageRFL = RunningAverage(&strainGuageArrays[1], weightOnRFLScale);

    float time = millis() - time1;

    Serial.print(averageLFL);
    Serial.print(" g, ");
    Serial.print(averageRFL);
    Serial.print( "g, " );
    Serial.print(time);
    Serial.println(" s");

}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////                            //////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////         functions          //////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////                            //////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double GetValueStrainGauge(HX711& scale, double factor, double freeNumber)
{
    double rawValue = scale.get_value(1);
    double value = rawValue/factor+freeNumber;
    return value;
}

double RunningAverage(StrainGuage *strainGuageArray, double value)
{
    if(strainGuageArray->indexInArrary>=ARRAY_SIZE)
    {
        strainGuageArray->sum -= strainGuageArray->measurementsArray[strainGuageArray->indexInArrary % ARRAY_SIZE];
    }

    strainGuageArray->measurementsArray[strainGuageArray->indexInArrary % ARRAY_SIZE] = value;
    strainGuageArray->sum += value;

    strainGuageArray->indexInArrary++;

    double average = strainGuageArray->sum / (strainGuageArray->indexInArrary < ARRAY_SIZE ? strainGuageArray->indexInArrary : ARRAY_SIZE);
    return average;
}
